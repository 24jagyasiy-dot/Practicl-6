# -*- coding: utf-8 -*-
"""Practical6_A5_B2_19_Daa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FQKt8ma-mWbvyWLHcVgAp6ZKqYRdA3kW
"""

def OptimalBST(p, q):
    n = len(p)
    E = [[0] * (n+1) for _ in range(n+1)]
    W = [[0] * (n+1) for _ in range(n+1)]
    R = [[0] * (n+1) for _ in range(n+1)]

    for i in range(n+1):
        E[i][i] = q[i]
        W[i][i] = q[i]

    for length in range(1, n+1):
        for i in range(n - length + 1):
            j = i + length
            E[i][j] = float('inf')
            W[i][j] = W[i][j-1] + p[j-1] + q[j]
            for k in range(i+1, j+1):
                cost = E[i][k-1] + E[k][j] + W[i][j]
                if cost < E[i][j]:
                    E[i][j] = cost
                    R[i][j] = k

    return E, W, R

p = [0.1, 0.2, 0.3, 0.4]
q = [0.05, 0.1, 0.05, 0.05, 0.1]

E, W, R = OptimalBST(p, q)

print("E matrix:")
for row in E:
    print(row)
print("\nW matrix:")
for row in W:
    print(row)
print("\nR matrix:")
for row in R:
    print(row)

#task 1
def OptimalBST(P):
    n = len(P)
    C = [[0 for _ in range(n+1)] for _ in range(n+1)]
    R = [[0 for _ in range(n+1)] for _ in range(n+1)]

    for i in range(n):
        C[i][i] = P[i]
        R[i][i] = i

    for length in range(2, n+1):
        for i in range(n - length + 1):
            j = i + length - 1
            C[i][j] = float('inf')
            prob_sum = sum(P[i:j+1])
            for k in range(i, j+1):
                cost_left = C[i][k-1] if k > i else 0
                cost_right = C[k+1][j] if k < j else 0
                cost = cost_left + cost_right + prob_sum
                if cost < C[i][j]:
                    C[i][j] = cost
                    R[i][j] = k

    return C, R

P = [0.1, 0.2, 0.3, 0.4]
C, R = OptimalBST(P)

print("Cost matrix C:")
for row in C:
    print(row)

print("\nRoot matrix R:")
for row in R:
    print(row)

